with Ada.Calendar; use Ada.Calendar;with Ada.Command_Line; use Ada.Command_Line;with Ada.Text_IO; use Ada.Text_IO;procedure Set_Algorithms_Shootout.Run is   use Integer_Sets;   type Density_Type is delta 0.000_001 digits 7 range 0.000_001 .. 1.0;   type Algorithm is (Std_Algo, Jackpot);   type Natural_Array is array (Positive range <>) of Natural;   type String_Ptr is access String;   Prefix_Ptr : String_Ptr;   Option_Count : array (Character) of Natural := (others => 0);   Count : Natural := 0;   T : Time;   HTML, LaTeX : File_Type;   procedure Inc (X : in out Standard.Integer) is begin X := X + 1; end;   function Max (N : Natural_Array) return Natural is      M : Natural := 0;   begin      for I in N'Range loop         if N (I) > M then M := N (I); end if;      end loop;      return M;   end;      procedure Inc_Count (X : Integer) is begin Inc (Count); end;      procedure S_Intersect is new Standard_Intersect (Inc_Count);   procedure J_Intersect is new Jackpot_Intersect (Inc_Count);   function Img (N : Natural) return String is      S : String := Natural'Image (N);   begin      return S (S'First + 1 .. S'Last);   end;   function Img (D : Duration) return String is   begin      return Img (Natural (1_000.0 * Float (D)));   end;   function Img (X : Density_Type) return String is      S : String := Density_Type'Image (X);   begin      for I in reverse S'Range loop         if S (I) /= '0' then return S (S'First .. I); end if;      end loop;      return "0";   end;begin   Put ("Reading options [");   for I in 1 .. Argument_Count loop      Inc (Option_Count (Argument (I) (Argument (I)'First)));   end loop;   for I in Option_Count'Range loop      if Option_Count (I) > 0 then         Put (Natural'Image (Option_Count (I)) & I);      end if;   end loop;   Put_Line ("]");   Put_Line ("Declaring objects");   declare      Arity : Natural_Array (1 .. Option_Count ('a'));      Density : array (1 .. Option_Count ('d')) of Density_Type;      Size : Natural_Array (1 .. Option_Count ('s'));      D : array (Size'Range, Density'Range, Arity'Range, Algorithm) of Duration;      R : array (Size'Range, Density'Range, Arity'Range) of Duration;      Max_R : array (Size'Range) of Duration;      Result_Count : array (Size'Range, Density'Range, Arity'Range) of Natural;            function Img_LaTeX (I, J, K : Positive; L : Algorithm) return String is         M : Algorithm := Algorithm'First;      begin         for N in Algorithm'Succ (Algorithm'First) .. Algorithm'Last loop            if D (I, J, K, N) < D (I, J, K, M) then M := N; end if;         end loop;         if L = M then return "\textbf{" & Algorithm'Image (L) (1 .. 1) & "}";         else return Algorithm'Image (L) (1 .. 1);         end if;      end;         begin      Put_Line ("Rereading options");      Option_Count := (others => 0);      for I in 1 .. Argument_Count loop         Inc (Option_Count (Argument (I) (1)));         case Argument (I) (Argument (I)'First) is            when 'a' => Arity (Option_Count ('a'))              := Natural'Value (Argument (I) (Argument (I)'First + 1 .. Argument (I)'Last));            when 'd' => Density (Option_Count ('d'))              := Density_Type'Value (Argument (I) (Argument (I)'First + 1 .. Argument (I)'Last));            when 'p' => Prefix_Ptr              := new String'(Argument (I) (Argument (I)'First + 1 .. Argument (I)'Last));            when 's' => Size (Option_Count ('s'))              := Natural'Value (Argument (I) (Argument (I)'First + 1 .. Argument (I)'Last));            when others => null;         end case;      end loop;      Put_Line ("Declaring more objects");      declare         Max_Arity : Natural := Max (Arity);         S : Set_Array (1 .. Max_Arity);         R1 : Duration;      begin         Put_Line ("Entering main loop");         for I in Size'Range loop            for J in Density'Range loop               Put_Line ("Processing size" & Natural'Image (Size (I)) & ", density" & Img (Density (J)));               Put ("Generating random sets");               for K in 1 .. Max_Arity loop                  Put (Natural'Image (K));                  Generate_Random_Set (S (K), Size_Type (Size (I)), Float (Density (J)));               end loop;               New_Line;               Put_Line ("Intersecting...");               for K in Arity'Range loop                  Put ("   arity" & Natural'Image (Arity (K)) & " =>");                  Count := 0;                                    T := Clock;                  S_Intersect (S (1 .. Arity (K)));                  D (I, J, K, Std_Algo) := Clock - T;                                    Result_Count (I, J, K) := Count;                  Put (" #" & Natural'Image (Result_Count (I, J, K)));                  Put  (", S" & Duration'Image (D (I, J, K, Std_Algo)) & "s");                  Count := 0;                                    T := Clock;                  J_Intersect (S (1 .. Arity (K)));                  D (I, J, K, Jackpot) := Clock - T;                                    Put_Line  (", J" & Duration'Image (D (I, J, K, Jackpot)) & "s");                  if Count /= Result_Count (I, J, K) then Put_Line ("***"&Count'img); end if;                  end loop;            end loop;         end loop;         Put_Line ("Main loop exited");                  Put_Line ("Computing time ratios");         for I in Size'Range loop            Max_R (I) := Duration'First;            for J in Density'Range loop               for K in Arity'Range loop                  R (I, J, K) := D (I, J, K, Std_Algo) / D (I, J, K, Jackpot);                  if R (I, J, K) > Max_R (I) then Max_R (I) := R (I, J, K); end if;               end loop;            end loop;         end loop;                  Put_Line ("Writing report files");         Create (HTML, Out_File, Prefix_Ptr.all & ".html");         Put_Line (HTML, "<html>");         Put_Line (HTML, "<h1>" & Prefix_Ptr.all & "</h1>");         for I in Size'Range loop            Create (LaTeX, Out_File, Prefix_Ptr.all & "-size-" & Img (Size (I)) & ".tex");            Put_Line (LaTeX, "\begin{figure}");            Put_Line (LaTeX,               "\caption{Result size and times for operand size " &               Img (Size (I)) &               "\label{" & Prefix_Ptr.all & "-size-" & Img (Size (I)) & "}}");            Put (LaTeX, "\begin{tabular}{c");            for K in Arity'Range loop               if K > Arity'First then Put (LaTeX, "@{\hspace{-1pt}}"); end if;               Put (LaTeX, "c");            end loop;            Put_Line (LaTeX, "@{\hfill}}");            New_Line (LaTeX);            for K in Arity'Range loop               Put_Line (LaTeX, "&");               if K = Arity'Last then                  Put_Line (LaTeX, "\scriptsize \hfill Arity " &                            Img (Arity (K)) & " \hfill");               else                  Put_Line (LaTeX, "\scriptsize Arity " &                            Img (Arity (K)));               end if;            end loop;            Put_Line (HTML, "<h2>Size" & Natural'Image (Size (I)) & "</h2>");            Put_Line (HTML, "<table border>");            Put_Line (HTML, "<tr><th>");            for K in Arity'Range loop               Put (HTML, "<th>Arity" & Natural'Image (Arity (K)));            end loop;            for J in Density'Range loop               if J > Density'First then Put (LaTeX, "\vspace{-1pt}"); end if;               Put_Line (LaTeX, "\\");               Put_Line (LaTeX, "\scriptsize \begin{tabular}{c}Density \\ " &                                Img (Density (J)) & "\end{tabular}");               Put (HTML, "<tr><th>Density<br>" & Img (Density (J)));               for K in Arity'Range loop                  Put_Line (LaTeX, "&");                  if R (I, J, K) > 1.0 then                     R1 := Duration (1.0 - 0.5 * Float (R (I, J, K) - 1.0) / Float (Max_R (I) - 1.0));                  else                     R1 := 1.0;                  end if;                  Put_Line (LaTeX,                     "\fcolorbox [rgb]{0,0,0} {" &                     Duration'Image (R1) & "," &                     Duration'Image (R1) & "," &                      Duration'Image (R1) & "}" &                     "{\tiny\begin{tabular}{@{}p{10mm}@{}}\centering{\textit{" &                     Img (Result_Count (I, J, K)) &                     "}}");                  for L in Algorithm'Range loop                     Put (LaTeX, "\\");                     if L > Algorithm'First then                        Put (LaTeX, "\vspace{-1pt}");                     end if;                     Put (LaTeX,                        Img_LaTeX (I, J, K, L) &                        "\dotfill " &                        Img (D (I, J, K, L)));                  end loop;                  Put_Line (LaTeX,                     "\end{tabular}}");                  Put (HTML, "<td bgcolor=""");                  if D (I, J, K, Std_Algo) < D (I, J, K, Jackpot) then                     Put (HTML, "silver");                  else                     Put (HTML, "white");                  end if;                  Put (HTML, """>");                  if Arity (K) /= 0 then                     Put (HTML, "#" & Natural'Image (Result_Count (I, J, K)));                  end if;                  for L in Algorithm loop                     Put (HTML, "<br>" & Algorithm'Image (L) (1) & Duration'Image (D (I, J, K, L)));                  end loop;                  New_Line (HTML);               end loop;            end loop;            Put_Line (LaTeX, "\end{tabular}");            Put_Line (LaTeX, "\end{figure}");            Close (LaTeX);            Put_Line (HTML, "</table>");         end loop;         Close (HTML);               end;   end;   Put_Line ("Program terminated normally");end;