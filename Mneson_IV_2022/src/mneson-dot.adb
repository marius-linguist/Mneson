with Ada.Strings.Unbounded;package body Mneson.Dot is   function Sprinkle_Newlines (S : String) return String is      use Ada.Strings.Unbounded;      U : Unbounded_String := To_Unbounded_String (S);      K : Natural := 0;   begin      for I in 1 .. Length (U) loop         K := K + 1;         if Element (U, I) = ' ' then            if K > 50 then               Insert (U, I, "\n");               K := 0;            end if;         end if;      end loop;      return To_String (U);   end;      function Dot_Img     (X : Vertex;      Max_Length : Img_String_Length := Default_Max_Length)      return String   is      use Work;      use Text;      S : String := '"' & Img (X, Max_Length) & '"';      I : Standard.Integer := S'First;      J : Standard.Integer := S'Last;   begin      if S'Length > 2 then         if S (I + 1) = '"' then I := I + 1; end if;         if S (J - 1) = '"' then J := J - 1; end if;      end if;      return Sprinkle_Newlines (S (I .. J));   end;   procedure Dump_Graph     (File : File_Type := Standard_Output;      Max_Length : Img_String_Length := Default_Max_Length)   is      procedure Put_Shape (X : Vertex) is      begin         Put (File, Dot_Img (X, Max_Length));         if Work.Is_Valueless (X) then            Put (File, " [shape=point]");         end if;         New_Line (File);      end;      procedure Put_Link (Source, Target : Vertex) is      begin         Put_Line           (File,            Dot_Img (Source, Max_Length) &            " -> " &            Dot_Img (Target, Max_Length));         Put_Shape (Source);         Put_Shape (Target);      end;   begin      Put_Line (File, "digraph { size=""4.5,4.5"" rankdir=LR");      Work.For_Each_Link (Put_Link'Unrestricted_Access);      Put_Line (File, "}");   end;   end;