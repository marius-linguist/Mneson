with Ada.Command_Line;with Ada.Text_IO;with Base;procedure Mneson.XML.Mnesonise is   use Ada.Command_Line;   use Ada.Text_IO;   use Base;   function Get return Character is      C : Character;   begin      Get (C);      return C;   exception      when End_Error => raise End_Of_Stream;   end;      c : Vertex := To_Vertex ("c"); -- complex   s : Vertex := To_Vertex ("s"); -- simple   o : Vertex := To_Vertex ("o"); -- ordered   u : Vertex := To_Vertex ("u"); -- unordered      Complex_Default : Boolean := True;   Ordered_Default : Boolean := True;   function Is_Complex (Element_Name : Vertex) return Boolean is   begin      if Connected (c, Element_Name) then return True;      elsif Connected (s, Element_Name) then return False;      else return Complex_Default;      end if;   end;      function Is_Ordered (Element_Name : Vertex) return Boolean is   begin      if Connected (o, Element_Name) then return True;      elsif Connected (u, Element_Name) then return False;      else return Ordered_Default;      end if;   end;      Result : Vertex;begin   Create (Argument (1));   for I in 2 .. Argument_Count loop      if Argument (I) (2) = '.' then        Connect          (To_Vertex (Argument (I) (1 .. 1)),           Val (Argument (I) (2 .. Argument (I)'Last)));      elsif Argument (I) = "c!" then Complex_Default := True;      elsif Argument (I) = "s!" then Complex_Default := False;      elsif Argument (I) = "o!" then Ordered_Default := True;      elsif Argument (I) = "u!" then Ordered_Default := False;      end if;   end loop;   declare      function Mnesoniser is         new Mnesonise_XML_Stream (Get, Base.Work, Is_Complex, Is_Ordered);   begin      Result := Mnesoniser;   end;      Close;   Ada.Text_IO.Put_Line (Img (Result));end;